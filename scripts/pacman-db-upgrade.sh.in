#!/bin/bash -e
#
#   pacman-db-upgrade - upgrade the local pacman db to a newer format
#   @configure_input@
#
#   Copyright (c) 2010-2013 Pacman Development Team <pacman-dev@archlinux.org>
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

# gettext initialization
export TEXTDOMAIN='pacman-scripts'
export TEXTDOMAINDIR='@localedir@'

declare -r myver='@PACKAGE_VERSION@'

eval $(awk '/DBPath/ {print $1$2$3}' @sysconfdir@/pacman.conf)
dbroot="${DBPath:-@localstatedir@/lib/pacman/}"

USE_COLOR='y'

m4_include(library/output_format.sh)

usage() {
	printf "pacman-db-upgrade (pacman) %s\n\n" "$myver"
	printf -- "$(gettext "Usage: %s [--nocolor] [pacman_db_root]")\n\n" "$0"
}

version() {
	printf "pacman-db-upgrade (pacman) %s\n" "$myver"
	printf -- "$(gettext "\
Copyright (c) 2010-2013 Pacman Development Team <pacman-dev@archlinux.org>.\n\
This is free software; see the source for copying conditions.\n\
There is NO WARRANTY, to the extent permitted by law.\n")"
}

die() {
	error "$@"
	exit 1
}

die_r() {
	rm -f "$lockfile"
	die "$@"
}

# PROGRAM START

# determine whether we have gettext; make it a no-op if we do not
if ! type gettext &>/dev/null; then
	gettext() {
		echo "$@"
	}
fi

if [[ $1 = "-h" || $1 = "--help" ]]; then
	usage
	exit 0
fi

if [[ $1 = "-V" || $1 = "--version" ]]; then
	version
	exit 0
fi

if [[ $1 = "--nocolor" ]]; then
	USE_COLOR='n'
	shift
fi

m4_include(library/term_colors.sh)

if [[ -n $1 ]]; then
	dbroot="$1"
fi

if [[ ! -d $dbroot ]]; then
	die "$(gettext "%s does not exist or is not a directory.")" "$dbroot"
fi

if [[ ! -d $dbroot/local ]]; then
	die "$(gettext "%s is not a pacman database directory.")" "$dbroot"
fi

if [[ ! -w $dbroot ]]; then
	die "$(gettext "You must have correct permissions to upgrade the database.")"
fi

# strip any trailing slash from our dbroot
dbroot="${dbroot%/}"
# form the path to our lockfile location
lockfile="${dbroot}/db.lck"

# make sure pacman isn't running
if [[ -f $lockfile ]]; then
	die "$(gettext "Pacman lock file was found. Cannot run while pacman is running.")"
fi
# do not let pacman run while we do this
touch "$lockfile"

if [[ -f "${dbroot}"/local/.alpm_db_version ]]; then
	db_version=$(cat "${dbroot}"/local/.alpm_db_version)
fi

if [[ -z "$db_version" ]]; then
	# pacman-3.4 to 3.5 upgrade - merge depends into desc
	if [[ $(find "$dbroot"/local -name depends) ]]; then
		msg "$(gettext "Pre-3.5 database format detected - upgrading...")"
		for i in "$dbroot"/local/*; do
			if [[ -f "$i"/depends ]]; then
				cat "$i"/depends >> "$i"/desc
				rm "$i"/depends
			fi
		done
		msg "$(gettext "Done.")"
	fi

	# pacman 4.1 to 4.2 upgrade - remove directory symlink support
	dirlist=()

	unset GREP_OPTIONS
	while IFS= read -r dir; do
		dirlist+=("/${dir%/}")
	done < <(grep -h '/$' "$dbroot"/local/*/files | sort -u)

	mapfile -t dirlist < <(find "${dirlist[@]}" -maxdepth 0 -type l)

	if [[ ${#dirlist[@]} != 0 ]]; then
		msg "$(gettext "Pre-4.2 database format detected - upgrading...")"
		for dir in "${dirlist[@]}"; do
			realdir="$(cd $dir; pwd -P)"
			for f in "$dbroot"/local/*/files; do
				awk -v "dir=${dir#/}/" -v "realdir=${realdir#/}/" '
					BEGIN {
						i = length(dir) + 1
					}
					{
						if (index($0, dir) == 1) {
							printf("%s%s\n", realdir, substr($0, i))
						} else {
							print
						}
					}' $f > $f.tmp
				mv $f.tmp $f
			done
		done
	fi
fi

echo "9" > "$dbroot"/local/.alpm_db_version

# remove the lock file
rm -f "$lockfile"

# vim: set ts=2 sw=2 noet:
